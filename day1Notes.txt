Good underlying architecture, increases the odd of success.
Making design that can grow as your system grows it cruicial for growth.
Software should be made using Agile and Lean thinking and architecture is the missing link between development process and implementation.

What is software architecture?
    First, the word architect is a noun. Artitects design complete things, not conserned with implementation.
    Software architecture refers to the design of the overall structure of a software system. Just like building architects design the layout of a building but don't handle every construction detail,
    software architects design the structure of the system without focusing on specific implementation details, which is the role of programming.
    Some people mistakenly view architecture as merely plugging together pre-built components (like LEGO blocks). However, true architecture is about designing a system that fits the needs of the customer and the domain it serves.
    The choice of technology and components, such as databases, should come after understanding the problem you're solving.
    A good architect starts with the customer’s requirements and works down to the implementation, not the other way around.

Traditional architect vs Modern Agile Artitects
    In traditional software development, a software architect, often referred to as "Architectus Matrixis," works in isolation, creating large, upfront designs before any code is written. 
    This approach is often inefficient as it slows down the development process, introduces bottlenecks, and doesn't adapt to evolving requirements. These architects view themselves as superior to programmers, 
    focusing on theoretical design and leaving implementation to others. The process is rigid and bureaucratic, requiring approvals for changes and often leading to outdated or incorrect designs before anything is even built.

    In contrast, modern Agile architects work iteratively, learning and adapting as the project progresses. They don't create a rigid, upfront design, but instead evolve the architecture with the team as the software is developed. 
    This approach is more efficient and responsive to user needs, eliminating bottlenecks and allowing for quicker, more effective changes. Agile architects focus on collaboration and are integrated into the development process, 
    reducing waste and improving overall productivity.

More on Modern architects 
    In traditional waterfall development, architecture is rigid, with sequential steps where design is completed before development begins. Agile, however, focuses on flexibility, adapting as you learn.
    In Agile, architecture evolves incrementally, with small releases and continuous feedback, allowing for constant changes and learning. Experiments guide decision-making, and failures are seen as learning opportunities, not setbacks.
    In Agile, everyone contributes to architecture, with no single authority. Agile Architects act as "servant leaders," supporting teams, coaching them, and ensuring system coherence. They guide decisions collaboratively,
    leveraging the team's deep understanding of the code to improve the system while maintaining the broader architectural vision.

A day in the life of an architect: 
     Frank, an Agile architect, spends his day guiding cross-functional teams at Acme, Inc. He facilitates architectural decisions, ensuring collaboration between businesspeople, developers, designers, and operations experts.
     During a meeting, he helps the team decide on using a microservice architecture by engaging everyone through dot voting.

    Frank also attends a sprint review, where the team receives feedback from a customer struggling with the system. This reveals design flaws, prompting the team to adjust the architecture. 
    Frank sets up a visit to observe the customer at work, ensuring the team better understands user needs.

    Additionally, Frank mentors team members, like Jill, who is learning about reactive systems and preparing a presentation. They decide to share her work with a broader audience during a guild meeting. 
    Throughout his day, Frank supports, teaches, and facilitates collaboration, ensuring the architecture evolves based on real user feedback and team input.

From developer to architecture
    The path to becoming a software architect begins with being a skilled programmer. Strong programming skills are essential for understanding how to structure code and solve real-world problems.
    Architects must have hands-on experience in coding to grasp concepts like simplicity, maintainability, and testability, which are foundational to good architecture.

    Learning about design patterns is the next step, as they serve as building blocks for solving small problems within a system. Over time, 
    architects develop the ability to understand how these patterns interact to create larger, more complex systems, which is the essence of architecture.

    Exposure to different systems, whether through working on many projects or studying open-source code, is crucial. Architects benefit from analyzing code, 
    improving it, and considering how changes affect the system. Engaging with other architects and participating in conferences, meetups, and study groups helps in broadening knowledge and sharing insights.

    Additionally, strong communication and presentation skills are vital, as architects work closely with teams and must explain their designs.
    Hands-on experience designing systems, even through personal projects, further sharpens an architect’s skills. Finally, continuous learning, experimentation, and collaboration are key to mastering the role of an architect.